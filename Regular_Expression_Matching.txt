Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.



----------------------------------------------------------------------------------------------------------------------------------

Solution Explanation 

1. Solve this problem using dynamic programming in which '.' represents any character you want, and '*' can either make the character before it disappear or repeat many times to match the string
2. Set up a grid. Rows represent every character in your string 's' PLUS an empty row at the top for any empty string. Columns represent every character in your pattern 'p' plus an empty column at the left for an empty pattern.
3. Fill the first row. The first row deals with matching an empty string with your pattern. 