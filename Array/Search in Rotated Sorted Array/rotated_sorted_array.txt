Problem:
33. Search in Rotated Sorted Array

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

Solution:
Use binary search to parse through the list and look for the target value. 
Firstly, we set two pointers for the first and last index of the list. For each check in which the leftmost pointer index is less than the rightmost pointer index, we set a pointer to be the middle of the two. 
We then check to see if the middle pointer equals the target value. If it does, then return the value. If it does now, we check to see which section of the list the target value CAN be.
Note that with the middle pointer, we can look at the list in two separate sections. [left_pointer, mid_pointer], [mid_pointer, right_pointer]. If we identified that the target value may be in the (for example) left sub list, we update the indexes so that we disregard the part of the list that the value cannot be in.  