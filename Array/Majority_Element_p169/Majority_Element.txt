Problem:

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

Solution:
In the code provided, we will have two instantiated variables "candidate" and "count" representing the output and counter respectively. 
The code will iterate through each element of the nums list and operates under the assuption that the majority element occurs more than n/2 times in the array. 
The function first starts by setting the first element as the majority candidate and sets the count to 1. If the following element in the array is the same, we will increment the count variable by 1, otherwise decrement by 1. 
If the count variable reaches 0, we will update the majority candidate variable.  
